#include <iostream>
#include <cstdlib>
#include <ctime>
#include <conio.h>  // For _kbhit() and _getch() on Windows
#include <windows.h>  // For Sleep()
#include <vector>

using namespace std;

// Directions for player and enemy movement
const int dx[] = { 0, 1, 0, -1 };  // Right, Down, Left, Up
const int dy[] = { 1, 0, -1, 0 };

// Max maze size
const int MAX_WIDTH = 50;
const int MAX_HEIGHT = 40;

// Maze grid and the player
int WIDTH, HEIGHT;
char maze[MAX_HEIGHT][MAX_WIDTH];  // Static 2D array for maze
int playerX, playerY;
int exitX, exitY;

// Enemy structure to handle multiple enemies
struct Enemy {
    int x, y;
};
vector<Enemy> enemies;  // Vector to hold all enemies
int enemyCount = 1;      // Default number of enemies

// Puzzle tracking
bool puzzleSolved[3] = { false, false, false };  // Track up to 3 puzzles
int puzzleCount = 0;  // Number of puzzles to solve

// Function prototypes
void initializeMaze();
void drawMaze();
void movePlayer(char direction);
void moveEnemies();
bool hasWon();
void initializeGame();
void gameMenu();

// Function to initialize the maze with walls, borders, random obstacles, and puzzles
void initializeMaze() {
    // First, set all borders and empty spaces
    for (int i = 0; i < HEIGHT; i++) {
        for (int j = 0; j < WIDTH; j++) {
            if (i == 0 || j == 0 || i == HEIGHT - 1 || j == WIDTH - 1) {
                maze[i][j] = '#';  // Wall for borders
            }
            else {
                maze[i][j] = ' ';  // Empty space
            }
        }
    }

    // Number of obstacles you want to place
    int numObstacles = (WIDTH * HEIGHT) / 10;  // 10% of the grid size

    // Place random obstacles in the maze
    for (int i = 0; i < numObstacles; i++) {
        int obstacleX = rand() % (WIDTH - 2) + 1;  // Random X (1 to WIDTH-2)
        int obstacleY = rand() % (HEIGHT - 2) + 1; // Random Y (1 to HEIGHT-2)

        // Ensure the obstacle is not placed on the player, exit, or enemies
        if ((obstacleX != playerX || obstacleY != playerY) &&
            (obstacleX != exitX || obstacleY != exitY)) {
            maze[obstacleY][obstacleX] = '#';  // Place obstacle
        }
    }

    // Place puzzles (? character)
    puzzleCount = rand() % 3 + 1;  // Random number of puzzles (1 to 3)
    for (int i = 0; i < puzzleCount; i++) {
        int puzzleX = rand() % (WIDTH - 2) + 1;
        int puzzleY = rand() % (HEIGHT - 2) + 1;

        // Ensure puzzle is not placed on player, exit, or enemies
        if (maze[puzzleY][puzzleX] == ' ' &&
            (puzzleX != playerX || puzzleY != playerY) &&
            (puzzleX != exitX || puzzleY != exitY)) {
            maze[puzzleY][puzzleX] = '?';  // Place puzzle
        }
    }
}

// Function to draw the maze, player, exit, and enemies
void drawMaze() {
    system("cls");  // Clear the console screen

    for (int i = 0; i < HEIGHT; i++) {
        for (int j = 0; j < WIDTH; j++) {
            bool enemyDrawn = false;
            for (const Enemy& e : enemies) {
                if (i == e.y && j == e.x) {
                    cout << 'X';  // Enemy
                    enemyDrawn = true;
                    break;
                }
            }

            if (!enemyDrawn) {
                if (i == playerY && j == playerX) {
                    cout << 'P';  // Player
                }
                else if (i == exitY && j == exitX) {
                    cout << 'E';  // Exit
                }
                else {
                    cout << maze[i][j];  // Maze walls (and empty spaces)
                }
            }
        }
        cout << endl;
    }
}

// Function to move the player
void movePlayer(char direction) {
    int newX = playerX;
    int newY = playerY;

    switch (direction) {
    case 'w': newY -= 1; break;  // Up
    case 'a': newX -= 1; break;  // Left
    case 's': newY += 1; break;  // Down
    case 'd': newX += 1; break;  // Right
    }

    // Check if the new position is within bounds and not a wall
    if (maze[newY][newX] != '#' && newX >= 0 && newX < WIDTH && newY >= 0 && newY < HEIGHT) {
        playerX = newX;
        playerY = newY;
    }
}

// Function to move enemies randomly
void moveEnemies() {
    for (Enemy& e : enemies) {
        int direction = rand() % 4;
        int newX = e.x + dx[direction];
        int newY = e.y + dy[direction];

        if (maze[newY][newX] != '#' && newX >= 0 && newX < WIDTH && newY >= 0 && newY < HEIGHT) {
            e.x = newX;
            e.y = newY;
        }
    }
}

// Function to check if the player has won
bool hasWon() {
    return playerX == exitX && playerY == exitY;
}

// Function to initialize game parameters (random maze size, etc.)
void initializeGame() {
    // Randomize maze dimensions (within limits)
    WIDTH = rand() % (MAX_WIDTH - 5) + 10;  // Random width between 10 and MAX_WIDTH
    HEIGHT = rand() % (MAX_HEIGHT - 4) + 7;  // Random height between 7 and MAX_HEIGHT

    // Set initial positions of player and exit
    playerX = 1;
    playerY = 1;
    exitX = WIDTH - 2;
    exitY = HEIGHT - 2;

    // Initialize enemies
    enemies.clear();
    for (int i = 0; i < enemyCount; i++) {
        Enemy e = { rand() % (WIDTH - 2) + 1, rand() % (HEIGHT - 2) + 1 };
        enemies.push_back(e);
    }

    // Initialize the maze
    initializeMaze();
}

// Function to display the game menu
void gameMenu() {
    while (true) {
        cout << "\n===== GAME MENU =====\n";
        cout << "1. Start New Game\n";
        cout << "2. Settings\n";
        cout << "3. Quit\n";
        cout << "Select an option: ";
        int choice;
        cin >> choice;

        if (choice == 1) {
            initializeGame();
            break;  // Start the game
        }
        else if (choice == 2) {
            cout << "\nEnter the number of starting enemies (1-10): ";
            cin >> enemyCount;
            if (enemyCount < 1) enemyCount = 1;
            if (enemyCount > 10) enemyCount = 10;
            cout << "Number of enemies set to: " << enemyCount << "\n";
        }
        else if (choice == 3) {
            exit(0);  // Quit the game
        }
        else {
            cout << "Invalid choice. Please try again.\n";
        }
    }
}

int main() {
    srand(time(0));  // Seed for random number generation
    gameMenu();  // Show the main menu

    while (true) {
        drawMaze();  // Draw the maze

        if (hasWon()) {
            cout << "You have won! Congratulations!\n";
            break;
        }

        if (_kbhit()) {
            char move = _getch();
            movePlayer(move);
        }

        moveEnemies();

        for (const Enemy& e : enemies) {
            if (playerX == e.x && playerY == e.y) {
                cout << "You were caught by an enemy! Game over.\n";
                return 0;
            }
        }

        Sleep(300);  // Sleep for a short time
    }

    return 0;
}
