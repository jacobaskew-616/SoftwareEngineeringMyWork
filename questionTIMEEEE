#include <iostream>
#include <cstdlib>
#include <ctime>
#include <conio.h>  // For _kbhit() and _getch() on Windows
#include <windows.h>  // For Sleep()

using namespace std;

// Directions for player and enemy movement
const int dx[] = { 0, 1, 0, -1 };  // Right, Down, Left, Up
const int dy[] = { 1, 0, -1, 0 };

// Max maze size
const int MAX_WIDTH = 50;
const int MAX_HEIGHT = 40;

// Maze grid and the player
int WIDTH, HEIGHT;
char maze[MAX_HEIGHT][MAX_WIDTH];  // Static 2D array for maze
int playerX, playerY;
int exitX, exitY;
int enemyX, enemyY;

// Puzzle tracking
bool puzzleSolved[3] = { false, false, false };  // Track up to 3 puzzles
int puzzleCount = 0;  // Number of puzzles to solve

// Function to initialize the maze with walls, borders, random obstacles, and puzzles
void initializeMaze() {
    // First, set all borders and empty spaces
    for (int i = 0; i < HEIGHT; i++) {
        for (int j = 0; j < WIDTH; j++) {
            if (i == 0 || j == 0 || i == HEIGHT - 1 || j == WIDTH - 1) {
                maze[i][j] = '#';  // Wall for borders
            }
            else {
                maze[i][j] = ' ';  // Empty space
            }
        }
    }

    // Number of obstacles you want to place
    int numObstacles = (WIDTH * HEIGHT) / 10;  // 10% of the grid size

    // Place random obstacles in the maze
    for (int i = 0; i < numObstacles; i++) {
        int obstacleX = rand() % (WIDTH - 2) + 1;  // Random X (1 to WIDTH-2)
        int obstacleY = rand() % (HEIGHT - 2) + 1; // Random Y (1 to HEIGHT-2)

        // Ensure the obstacle is not placed on the player, exit, or enemy
        if ((obstacleX != playerX || obstacleY != playerY) &&
            (obstacleX != exitX || obstacleY != exitY) &&
            (obstacleX != enemyX || obstacleY != enemyY)) {
            maze[obstacleY][obstacleX] = '#';  // Place obstacle
        }
    }

    // Place puzzles (? character)
    puzzleCount = rand() % 3 + 1;  // Random number of puzzles (1 to 3)
    for (int i = 0; i < puzzleCount; i++) {
        int puzzleX = rand() % (WIDTH - 2) + 1;
        int puzzleY = rand() % (HEIGHT - 2) + 1;

        // Ensure puzzle is not placed on player, exit, or enemy
        if (maze[puzzleY][puzzleX] == ' ' &&
            (puzzleX != playerX || puzzleY != playerY) &&
            (puzzleX != exitX || puzzleY != exitY) &&
            (puzzleX != enemyX || puzzleY != enemyY)) {
            maze[puzzleY][puzzleX] = '?';  // Place puzzle
        }
    }
}

// Function to draw the maze, player, exit, and enemy
void drawMaze() {
    system("cls");  // Clear the console screen

    for (int i = 0; i < HEIGHT; i++) {
        for (int j = 0; j < WIDTH; j++) {
            if (i == playerY && j == playerX) {
                cout << 'P';  // Player
            }
            else if (i == exitY && j == exitX) {
                cout << 'E';  // Exit
            }
            else if (i == enemyY && j == enemyX) {
                cout << 'X';  // Enemy
            }
            else {
                cout << maze[i][j];  // Maze walls (and empty spaces)
            }
        }
        cout << endl;
    }
}

// Function to move the player
void movePlayer(char direction) {
    int newX = playerX;
    int newY = playerY;

    switch (direction) {
    case 'w': newY -= 1; break;  // Up
    case 'a': newX -= 1; break;  // Left
    case 's': newY += 1; break;  // Down
    case 'd': newX += 1; break;  // Right
    }

    // Check if the new position is within bounds and not a wall
    if (maze[newY][newX] != '#' && newX >= 0 && newX < WIDTH && newY >= 0 && newY < HEIGHT) {
        playerX = newX;
        playerY = newY;
    }

    // Check if the player is on a puzzle block
    if (maze[playerY][playerX] == '?') {
        int puzzleIndex = rand() % puzzleCount;  // Randomly pick a puzzle to solve
        if (!puzzleSolved[puzzleIndex]) {
            int num1 = rand() % 10 + 1;
            int num2 = rand() % 10 + 1;
            int answer = num1 + num2;

            int playerAnswer;
            cout << "Solve: " << num1 << " + " << num2 << " = ";
            cin >> playerAnswer;

            if (playerAnswer == answer) {
                puzzleSolved[puzzleIndex] = true;
                cout << "Correct! Puzzle solved." << endl;
            }
            else {
                cout << "Incorrect. Try again later!" << endl;
            }
        }
    }
}

// Function to move the enemy randomly
void moveEnemy() {
    int direction = rand() % 4;
    int newX = enemyX + dx[direction];
    int newY = enemyY + dy[direction];

    if (maze[newY][newX] != '#' && newX >= 0 && newX < WIDTH && newY >= 0 && newY < HEIGHT) {
        enemyX = newX;
        enemyY = newY;
    }
}

// Function to check if the player has won
bool hasWon() {
    if (playerX == exitX && playerY == exitY) {
        // Check if all puzzles are solved before exiting
        for (int i = 0; i < puzzleCount; i++) {
            if (!puzzleSolved[i]) {
                return false;
            }
        }
        return true;
    }
    return false;
}

// Function to initialize game parameters (random maze size, etc.)
void initializeGame() {
    // Randomize maze dimensions (within limits)
    WIDTH = rand() % (MAX_WIDTH - 5) + 10;  // Random width between 10 and MAX_WIDTH (25)
    HEIGHT = rand() % (MAX_HEIGHT - 4) + 7;  // Random height between 7 and MAX_HEIGHT (12)

    // Set initial positions of player and exit
    playerX = 1;
    playerY = 1;
    exitX = WIDTH - 2;
    exitY = HEIGHT - 2;

    // Set enemy position
    enemyX = rand() % (WIDTH - 2) + 1;
    enemyY = rand() % (HEIGHT - 2) + 1;

    // Initialize the maze (set walls and random obstacles)
    initializeMaze();
}

int main() {
    srand(time(0));  // Seed for random number generation
    initializeGame();  // Initialize game parameters and maze

    while (true) {
        drawMaze();  // Draw the maze

        if (hasWon()) {
            cout << "You have won! Congratulations!" << endl;
            break;
        }

        if (_kbhit()) {  // Check if a key is pressed
            char move = _getch();  // Get the pressed key

            // Move the player based on key press
            if (move == 'w' || move == 'a' || move == 's' || move == 'd') {
                movePlayer(move);
            }
        }

        moveEnemy();  // Move the enemy

        // Check if the player has encountered the enemy
        if (playerX == enemyX && playerY == enemyY) {
            cout << "You were caught by an enemy! Game over." << endl;
            break;
        }

        // Sleep for a short time to make the game playable
        Sleep(300);  // Sleep for 100 milliseconds
    }

    return 0;
}
